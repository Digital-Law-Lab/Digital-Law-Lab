"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[985],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=m(n),u=r,b=d["".concat(l,".").concat(u)]||d[u]||s[u]||i;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:r,o[1]=c;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},295:(e,t,n)=>{n.d(t,{Kg:()=>g,eZ:()=>k,zq:()=>h});var a=n(7294);const r="Mark Ferraretto",i="https://github.com/mferrare",o="@mferrare",c="If you have any queries please contact",l="https://dev.dll.org.au/da/",m="https://dev.dll.org.au/da/",p="https://github.com/Digital-Law-Lab",d=p+"/Digital-Law-Lab",s=d+"/blob/main/docassemble_playground_manager.py",u="https://digital-law-lab.slack.com",b="https://drive.google.com/drive/folders/1fK41cjHrIeqfOmdmi-0lF3dOtZAjgYf9";function h(e){let t="";return t=e.text?e.text:c,a.createElement("p",null,t," ",a.createElement("a",{href:i},r))}function g(e){return"name"==e.data?r:"url"==e.data?i:"full_url"==e.data?"["+r+"]("+i+")":"github"==e.data?o:"ERROR: data: "+e.data+" does not exist"}function k(e){let t="",n="";switch(e.data){case"dev_server":t=l;break;case"dll_repo":t=d;break;case"dpm":t=s;case"prod_server":t=m;break;case"slack":t=u;break;case"github":t=p;break;case"google_drive":t=b;break;default:t="DisplayServiceData: Incorrect data supplied"}return n=e.service_name?e.service_name:"No service defined",a.createElement("span",null,a.createElement("a",{href:t},n))}},447:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(295);const o={title:"Code Branching Policy"},c=void 0,l={unversionedId:"policies/code-branching-policy",id:"policies/code-branching-policy",title:"Code Branching Policy",description:"Code Branching Diagram",source:"@site/docs/policies/code-branching-policy.mdx",sourceDirName:"policies",slug:"/policies/code-branching-policy",permalink:"/Digital-Law-Lab/policies/code-branching-policy",draft:!1,tags:[],version:"current",lastUpdatedBy:"Mark Ferraretto",lastUpdatedAt:1681130483,formattedLastUpdatedAt:"Apr 10, 2023",frontMatter:{title:"Code Branching Policy"},sidebar:"policiesSidebar",next:{title:"code-comments-policy",permalink:"/Digital-Law-Lab/policies/code-comments-policy"}},m={},p=[{value:"Code Branching Diagram",id:"code-branching-diagram",level:3},{value:"Policy",id:"policy",level:3}],d={toc:p},s="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"code-branching-diagram"},"Code Branching Diagram"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"master\n |\n - next\n    |\n    --- next_aaaa\n    |    |\n    |    --- issuenn\n    |\n    --- next_bbbb\n    |    |\n    |    --- issuemm\n    |    --- issuexx\n    |\n    --- next_cccc\n    ...\n")),(0,r.kt)("h3",{id:"policy"},"Policy"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"master"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"main")," only ever contains the version that is currently in production",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Only ",(0,r.kt)(i.Kg,{data:"github",mdxType:"DisplayAdminData"})," can promote code into ",(0,r.kt)("inlineCode",{parentName:"p"},"master")," and in accordance with ",(0,r.kt)("a",{parentName:"p",href:"/guides/promoting-code-into-production"},"Promoting Code into Production")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"next")," branch is created from ",(0,r.kt)("inlineCode",{parentName:"li"},"master"),".  This contains the next version to be promoted into production",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Only ",(0,r.kt)(i.Kg,{data:"github",mdxType:"DisplayAdminData"})," can promote code into ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," and in accordance with ","[Promoting Code into Production]","(/guides/promoting-code-into-production"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"next_aaa"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"next_bbbb")," etc are working branches for each team member.  ",(0,r.kt)("inlineCode",{parentName:"li"},"aaaa"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"bbbb")," should be the GitHub usernames of each team member",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},"These are working branches.  Each team member can commit changes freely to their own working branch."),(0,r.kt)("li",{parentName:"ol"},"Team member may also commit changes to other team members' working branches (but please consult with your team member first!)")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"issuemm"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"issuenn")," are optional but recommended.  ",(0,r.kt)("inlineCode",{parentName:"li"},"mm"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"nn")," etc are issue numbers as recorded in GitHub.  ",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"While team members could work directly on their ",(0,r.kt)("inlineCode",{parentName:"p"},"next_aaaa")," branch, it's recommended that team members create additional branches under their 'next branch` and work on issues there.  This makes it clearer to everyone which issues are being worked on by which team member.")))))}u.isMDXComponent=!0}}]);