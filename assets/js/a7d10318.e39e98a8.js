"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[985],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=m(n),u=a,b=d["".concat(l,".").concat(u)]||d[u]||p[u]||o;return n?r.createElement(b,i(i({ref:t},s),{},{components:n})):r.createElement(b,i({ref:t},s))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:a,i[1]=c;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2744:(e,t,n)=>{n.d(t,{Q:()=>o});var r=n(7294),a=n(5402);function o(e){const t="/Digital-Law-Lab/"+e.imageURL,n=e.altText||"image",o=e.borderStyle||a.ih,i=a.bT[o];return console.log(a.ih),console.log(e.borderStyle),r.createElement("img",{src:t,alt:n,style:i})}},5402:(e,t,n)=>{n.d(t,{Kg:()=>k,bT:()=>v,eZ:()=>f,hE:()=>l,ih:()=>y,zq:()=>g});var r=n(7294);const a="Mark Ferraretto",o="https://github.com/mferrare",i="@mferrare",c="If you have any queries please contact",l="https://drive.google.com/drive/folders/1fK41cjHrIeqfOmdmi-0lF3dOtZAjgYf9",m="https://dev.dll.org.au/da/",s="https://dev.dll.org.au/da/",d="https://github.com/Digital-Law-Lab",p=d+"/Digital-Law-Lab",u=p+"/blob/main/docassemble_playground_manager.py",b="https://digital-law-lab.slack.com",h=l;function g(e){let t="";return t=e.text?e.text:c,r.createElement("p",null,t," ",r.createElement("a",{href:o},a))}function k(e){return"name"==e.data?a:"url"==e.data?o:"full_url"==e.data?r.createElement("a",{href:o},a):"github"==e.data?i:"ERROR: data: "+e.data+" does not exist"}function f(e){let t="",n="";switch(e.data){case"dev_server":t=m;break;case"dll_repo":t=p;break;case"dpm":t=u;case"prod_server":t=s;break;case"slack":t=b;break;case"github":t=d;break;case"google_drive":t=h;break;default:t="DisplayServiceData: Incorrect data supplied"}return n=e.service_name?e.service_name:"No service defined",r.createElement("span",null,r.createElement("a",{href:t},n))}const y="disb",v={[y]:{borderRadius:"5px",display:"block",margin:"20px auto",boxShadow:"0px 2px 5px rgba(0,0,0,0.25)"},diis:{borderRadius:"5px",boxShadow:"0px 2px 5px rgba(0,0,0,0.25)"}}},447:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905)),o=n(5402);n(2744);const i={title:"Code Branching Policy"},c=void 0,l={unversionedId:"policies/code-branching-policy",id:"policies/code-branching-policy",title:"Code Branching Policy",description:"Code Branching Diagram",source:"@site/docs/policies/code-branching-policy.mdx",sourceDirName:"policies",slug:"/policies/code-branching-policy",permalink:"/Digital-Law-Lab/policies/code-branching-policy",draft:!1,tags:[],version:"current",lastUpdatedBy:"Mark Ferraretto",lastUpdatedAt:1687080327,formattedLastUpdatedAt:"Jun 18, 2023",frontMatter:{title:"Code Branching Policy"},sidebar:"policiesSidebar",next:{title:"Code Comments Policy",permalink:"/Digital-Law-Lab/policies/code-comments-policy"}},m={},s=[{value:"Code Branching Diagram",id:"code-branching-diagram",level:3},{value:"Policy",id:"policy",level:3}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"code-branching-diagram"},"Code Branching Diagram"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"master\n |\n - next\n    |\n    --- next_aaaa\n    |    |\n    |    --- issuenn\n    |\n    --- next_bbbb\n    |    |\n    |    --- issuemm\n    |    --- issuexx\n    |\n    --- next_cccc\n    ...\n")),(0,a.kt)("h3",{id:"policy"},"Policy"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"master"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"main")," only ever contains the version that is currently in production",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Only ",(0,a.kt)(o.Kg,{data:"github"})," can promote code into ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," and in accordance with ",(0,a.kt)("a",{parentName:"p",href:"/guides/promoting-code-into-production"},"Promoting Code into Production")))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"next")," branch is created from ",(0,a.kt)("inlineCode",{parentName:"li"},"master"),".  This contains the next version to be promoted into production",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Only ",(0,a.kt)(o.Kg,{data:"github"})," can promote code into ",(0,a.kt)("inlineCode",{parentName:"p"},"next")," and in accordance with ","[Promoting Code into Production]","(/guides/promoting-code-into-production"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"next_aaa"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"next_bbbb")," etc are working branches for each team member.  ",(0,a.kt)("inlineCode",{parentName:"li"},"aaaa"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"bbbb")," should be the GitHub usernames of each team member",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("ol",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ol"},"These are working branches.  Each team member can commit changes freely to their own working branch."),(0,a.kt)("li",{parentName:"ol"},"Team member may also commit changes to other team members' working branches (but please consult with your team member first!)")))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"issuemm"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"issuenn")," are optional but recommended.  ",(0,a.kt)("inlineCode",{parentName:"li"},"mm"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"nn")," etc are issue numbers as recorded in GitHub.  ",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"While team members could work directly on their ",(0,a.kt)("inlineCode",{parentName:"p"},"next_aaaa")," branch, it's recommended that team members create additional branches under their 'next branch` and work on issues there.  This makes it clearer to everyone which issues are being worked on by which team member.")))))}u.isMDXComponent=!0}}]);